#include <stdio.h>
#include <kipr/wombat.h>
#include <stdlib.h>
#define LEFT 0
#define RIGHT 3
#define compensation_rate 0.2
#define claw_click 0

// Turn 90 degrees right using one wheel
void ow_turnr_90() {
    mav(LEFT, 1000);
    msleep(2500);
    mav(0, 0);
    mav(3, 0);
    msleep(20);
}

// Turn 90 degrees left using one wheel
void ow_turnl_90() {
    mav(RIGHT, 1000);
    msleep(2500);
    mav(0, 0);
    mav(3, 0);
    msleep(20);
}

// Make a servo position function to limit servo stress for the later slow servo function
int Set_servo_position(int port, int value) {
    enable_servos();
    if (port == 0 && (value < 543 || value > 2000)) { // Servo limit for port 0 is 543 to 2000
        printf("Value exceeds limit\n");
        return 0;
    }
    else if (port == 1 && (value < 750 || value > 1850)) { // Servo limit for port 1 is 850 to 1566
        printf("Value exceeds limit\n");
        return 0;
    }
    else if (port == 2 && (value < 430 || value > 2000)) { // Servo limit for port 2 is 430 to 2000
        printf("Value exceeds limit\n");
        return 0;
    }
    else if (port == 3 && (value < 641 || value > 1940)) { // Servo limit for port 3 is 641 to 1640
        printf("Value exceeds limit\n");
        return 0;
    }
    else { // If the input doesn't exceed limit, execute the set_servo_position function
        set_servo_position(port, value);
        return 1;
    }
    disable_servos();
}

// Make a drive function using encoders for precision
void drive(int distance, int speed) {
    cmpc(0);
    cmpc(3);
    while (abs(gmpc(0)) < distance) {

        mav(LEFT, speed*1);
        mav(RIGHT, speed*1);

    }
    mav(0, 0);
    mav(3, 0);
    msleep(20);
}

// Make a function to make the servo go up or open the claw
void move_servo_up_or_open_claw(int port, int start_pos, int end_pos, int step) {
    for (int pos = start_pos; pos <= end_pos; pos += step) {
        Set_servo_position(port, pos);
        msleep(100);
    }
}

// Make a function to make the servo go down or close the claw
void move_servo_down_or_close_claw(int port, int start_pos, int end_pos, int step) {
    for (int pos = start_pos; pos >= end_pos; pos -= step) {
        Set_servo_position(port, pos);
        msleep(100);
    }
}

void square_up_black_line(int speed) {
    float go_back = 0.7; //Make a go back variable and adjust it if needed when testing later on
    float grey_value = 3000; //Make a grey value variable to check for white and black surfaces
    while(analog(3) < grey_value || (analog(0) < grey_value)) { //While loop for squaring up
        if (analog(3) < grey_value) { //Check if right sensor is on white surface
            //the right sensor is on white
            mav(3, speed);
        }else { //Check if right sensor is on black surface
            //right sensor is on black
            mav(3, -speed * go_back);
        }
        if (analog(0) < grey_value) { //Check if left sensor is on white surface
            //the left sensor is on white
            mav(0, speed);
        }else { //Check if left sensor is on black surface
            //left sensor is on black
            mav(0, -speed * go_back);
        }
    }
    //Lock the motors
    mav(3, 0);
    mav(0, 0);
    msleep(50);
}

void line_follow(int distance, int speed) { //Declare function for line follow
    //Clear motor position counters
    cmpc(0);
    while (abs(gmpc(0)) < distance) { //Make a while loop to follow line
        int error = analog(5) - 3000; //Declare error variable
        float speed_modifier = error * compensation_rate; //Declare speed_modifier variable
        mav(0, speed - speed_modifier);
        mav(3, speed + speed_modifier);
    }

    //Lock motors
    mav(0, 0);
    mav(3, 0);
    msleep(20);

}

// Make a pause function for pausing during the game
void pause() {
    mav(RIGHT, 0);
    mav(LEFT, 0);
    msleep(500);
}

void grab_drink() {
    move_servo_down_or_close_claw(0, 1600, 542, 30);
}

int decidecup(int look){
    if (look == 0){
        camera_load_config("redcup");
        camera_open();
        camera_update();
        if (get_object_count(0) < 1){
            return 1;
        }
        int x = get_object_center_x(0,0);
        if (x >= 400){
            return 3;
        }else if ( x <= 400 && x >= 200){
            return 2;
        }else{
            return 1;
        }

    }else if (look == 1){
        camera_load_config("greencup");
        camera_open();
        camera_update();
        if (get_object_count(0) < 1){
            return 1;
        }
        int x = get_object_center_x(0,0);
        
        if (x >= 400){
            return 3;
        }else if ( x <= 400 && x >= 200){
            return 2;
        }else{
            return 1;
        }


    }else{
        camera_load_config("bluecup");
        camera_open();
        camera_update();
        if (get_object_count(0) < 1){
            return 1;
        }
        int x = get_object_center_x(0,0);
        if (x >= 400){
            return 3;
        }else if ( x <= 400 && x >= 200){
            return 2;
        }else{
            return 1;
        }

    }
}


void turn(int angle){
    if (angle < 0){
        mav(RIGHT, 500);
        mav(LEFT, -500);
        
    }else{
        mav(RIGHT, -500);
        mav(LEFT, 500);
    }
    
    angle = abs(angle);
    angle = angle * 2500;
    angle = angle/90;
    
    msleep(angle);
    
    mav(0,0);
    mav(3,0);
    
}

int distance_from_cup = 1200;

void drive_until_cup() {
    while (analog(4) < distance_from_cup) {
        mav(0, 1000);
        mav(3, 1000);
    }
    mav(0, 0);
    mav(3, 0);
}

int whatcolor = 1; // 0 for red, 1 for green
int main() {
    enable_servos();
   
    move_servo_down_or_close_claw(0, 1300, 900, 50);
    square_up_black_line(600); // Square up at the beginning of the game
    ow_turnr_90(); // Turn right 90 degrees using one wheel
    drive(1700, -1000); // Drive backwards to square up against the pvc pipe and fix both axis
    drive(0, 1000);
    turn(-92); // Turn left
    drive(1000, -1500); // Drive back a bit to prepare for a square up
    pause(); // Pause after fast driving
    square_up_black_line(600); // Square up again for safety
    drive(400,1000);
	
    move_servo_down_or_close_claw(1, 1600, 1000, 30);
    int firstcup = decidecup(whatcolor);
    int blue = decidecup(2);

    printf("firstcup pos is %d and blue cup %d\n", firstcup,blue);
    
    if (firstcup == 2){
        move_servo_up_or_open_claw(1, 1000, 1600, 30);
        turn(-2);
        drive_until_cup();
        move_servo_down_or_close_claw(1, 1600, 1000, 50);
        drive(1100, 1000);
        move_servo_down_or_close_claw(0, 900, 700, 50);
        
    } else if (firstcup == 3){
        move_servo_up_or_open_claw(1, 1000, 1600, 30);
        turn(6.5);
        drive_until_cup();
        move_servo_down_or_close_claw(1, 1600, 1000, 50);
        drive(1700, 1000);
        move_servo_down_or_close_claw(0, 900, 700, 30);
    }else{
        move_servo_up_or_open_claw(1, 1000, 1600, 30);
        turn(45);
        drive(2000,1300);
        turn(-87);
        drive_until_cup();
        move_servo_down_or_close_claw(1, 1600, 1000, 50);
        drive(1100, 1000);
        move_servo_down_or_close_claw(0, 900, 700, 30);
        
    }
    pause();
    drive(1000,-1300);
    turn(45);
    drive(500, 1000);
    turn(45);
    drive(2000, -1300);
    square_up_black_line(600);
    drive(500, 1000);
    turn(45);
    drive(500, 1000);
    turn(45);
    pause();
    square_up_black_line(600);
    pause();
    move_servo_up_or_open_claw(0, 700, 1050, 30);
    move_servo_up_or_open_claw(1, 1000, 1750, 30);
    drive(500, -1000);
    turn(-45);
    drive(1000, 1000);
    turn(-45);
    drive(2750, 1000);
    turn(90);
    drive(1500, -1000);
    drive(300, 1000);
    move_servo_up_or_open_claw(2, 430, 1300, 30);
    move_servo_down_or_close_claw(3, 1900, 750, 30);
    move_servo_down_or_close_claw(2, 1300, 430, 30);
    move_servo_up_or_open_claw(3, 750, 1900, 30);
    turn(-90);
    drive(3600, -1300);
	turn(-45);
    drive(550, 1000);
    turn(-47);
    drive(170, 150);
    move_servo_down_or_close_claw(3, 1900, 1600, 30);
    move_servo_up_or_open_claw(2, 430, 1300, 30);
    move_servo_up_or_open_claw(3, 1600, 1900, 30);
    drive(500, 1000);
    turn(45);
    drive(1300, 1000);
    turn(-47);
    drive_until_cup();
    
    return 0;
}
