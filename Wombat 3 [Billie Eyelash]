[DRAFT 1]
#include <kipr/wombat.h>
#include <stdlib.h>
#define compensation_rate 0.5

void line_follow(int distance, int speed) { //Declare function for line follow
    //Clear motor position counters
    cmpc(0);
    while (abs(gmpc(0)) < distance) { //Make a while loop to follow line
        int error = analog(3) + 3200; //Declare error variable
        float speed_modifier = error * compensation_rate; //Declare speed_modifier variable
        mav(1, speed - speed_modifier);
        mav(3, speed + speed_modifier);
    }
}

void square_up(int speed) {
    float go_back = 0.6; //Make a go back variable and adjust it if needed when testing later on
    float grey_value = (2700 + 3760) / 2; //Make a grey value variable to check for white and black surfaces
    while(analog(3) < grey_value || (analog(5) < grey_value)) { //While loop for squaring up
        if (analog(3) < grey_value) { //Check if right sensor is on white surface
            //the right sensor is on white
            mav(1, speed);
        }else { //Check if right sensor is on black surface
            //right sensor is on black
            mav(1, -speed * go_back);
        }
        if (analog(5) < grey_value) { //Check if left sensor is on white surface
            //the left sensor is on white
            mav(3,speed);
        }else { //Check if left sensor is on black surface
            //left sensor is on black
            mav(3,-speed*go_back);
        }
    }
    //Lock the motors
    mav(1,0);
    mav(3,0);
    msleep(50);
}

void turn(int distance, int speed) {     //declaring a variable for turning
    
    cmpc(0);   //clearing the motor position counter

    while(abs(gmpc(0) < distance)) {    //getting the motor position for travelling a certain distance
        float change = 3600/190;  //declaring a variable
        float speed_modifier = 430;  //declaring a variable

        if(analog(3) < change) {
            //these will help you arc to turn
            mav(0,speed+speed_modifier);
            mav(3,speed-speed_modifier);
        }
        else {
            //these two will help you arc to get the right position
            mav(0,speed-speed_modifier);
            mav(3,speed+speed_modifier);
        }
    }
    
    mav(3,0);   //for locking the motors
    mav(0,0);
    msleep(50);
}


int main() {
    enable_servos();
    set_servo_position(2,900);
    
    line_follow(3100,600);
    square_up(700);
    
    line_follow(3000,600);
    square_up(700);
    
    turn(1700,500);
    
    line_follow(2000,600);
    
    turn(5100,500);
    
}



[DRAFT 2]
#include <kipr/wombat.h>
#include <stdlib.h>
#define compensation_rate 0.4

void line_follow(int distance, int speed) { //Declare function for line follow
    //Clear motor position counters
    cmpc(0);
    while (abs(gmpc(0)) < distance) { //Make a while loop to follow line
        int error = analog(3) + 3200; //Declare error variable
        float speed_modifier = error * compensation_rate; //Declare speed_modifier variable
        mav(1, speed - speed_modifier);
        mav(3, speed + speed_modifier);
    }
}

void square_up(int speed) {
    float go_back = 0.6; //Make a go back variable and adjust it if needed when testing later on
    float grey_value = (2700 + 3760) / 2; //Make a grey value variable to check for white and black surfaces
    while(analog(3) < grey_value || (analog(5) < grey_value)) { //While loop for squaring up
        if (analog(3) < grey_value) { //Check if right sensor is on white surface
            //the right sensor is on white
            mav(1, speed);
        }else { //Check if right sensor is on black surface
            //right sensor is on black
            mav(1, -speed * go_back);
        }
        if (analog(5) < grey_value) { //Check if left sensor is on white surface
            //the left sensor is on white
            mav(3,speed);
        }else { //Check if left sensor is on black surface
            //left sensor is on black
            mav(3,-speed*go_back);
        }
    }
    //Lock the motors
    mav(1,0);
    mav(3,0);
    msleep(50);
}

void turn(int distance, int speed) {     //declaring a variable for turning
    
    cmpc(0);   //clearing the motor position counter

    while(abs(gmpc(0) < distance)) {    //getting the motor position for travelling a certain distance
        float change = 3600/190;  //declaring a variable
        float speed_modifier = 430;  //declaring a variable

        if(analog(3) < change) {
            //these will help you arc to turn
            mav(0,speed+speed_modifier);
            mav(3,speed-speed_modifier);
        }
        else {
            //these two will help you arc to get the right position
            mav(0,speed-speed_modifier);
            mav(3,speed+speed_modifier);
        }
    }
    
    mav(3,0);   //for locking the motors
    mav(1,0);
    msleep(50);
}


int main() {
    enable_servos();
    set_servo_position(2,900);
    
    square_up(700);
    line_follow(3230,700);
    square_up(700);
    
    mav(1,0);
    mav(3,0);
    msleep(50);
    
    line_follow(3000,600);
    
    mav(1,350);
    mav(3,350);
    msleep(2000);
    
    square_up(700);
    turn(3600,700);
    square_up(700);
    line_follow(1000,900);
    
    turn(5100,500);
    
    line_follow(2000,600);
}

#include <kipr/wombat.h>
#include <stdlib.h>
#define compensation_rate 0.5

void line_follow(int distance, int speed) { //Declare function for line follow
    //Clear motor position counters
    cmpc(0);
    while (abs(gmpc(0)) < distance) { //Make a while loop to follow line
        int error = analog(3) + 3200; //Declare error variable
        float speed_modifier = error * compensation_rate; //Declare speed_modifier variable
        mav(1, speed - speed_modifier);
        mav(3, speed + speed_modifier);
    }
}

void square_up(int speed) {
    float go_back = 0.6; //Make a go back variable and adjust it if needed when testing later on
    float grey_value = (2700 + 3760) / 2; //Make a grey value variable to check for white and black surfaces
    while(analog(3) < grey_value || (analog(5) < grey_value)) { //While loop for squaring up
        if (analog(3) < grey_value) { //Check if right sensor is on white surface
            //the right sensor is on white
            mav(1, speed);
        }else { //Check if right sensor is on black surface
            //right sensor is on black
            mav(1, -speed * go_back);
        }
        if (analog(5) < grey_value) { //Check if left sensor is on white surface
            //the left sensor is on white
            mav(3,speed);
        }else { //Check if left sensor is on black surface
            //left sensor is on black
            mav(3,-speed*go_back);
        }
    }
    //Lock the motors
    mav(1,0);
    mav(3,0);
    msleep(50);
}

void turn(int distance, int speed) {     //declaring a variable for turning
    
    cmpc(0);   //clearing the motor position counter

    while(abs(gmpc(0) < distance)) {    //getting the motor position for travelling a certain distance
        float change = 3600/190;  //declaring a variable
        float speed_modifier = 430;  //declaring a variable

        if(analog(3) < change) {
            //these will help you arc to turn
            mav(0,speed+speed_modifier);
            mav(3,speed-speed_modifier);
        }
        else {
            //these two will help you arc to get the right position
            mav(0,speed-speed_modifier);
            mav(3,speed+speed_modifier);
        }
    }
    
    mav(3,0);   //for locking the motors
    mav(1,0);
    msleep(50);
}


int main() {
    enable_servos();
    set_servo_position(2,500);
    
    square_up(700);
    line_follow(3200,600);
    square_up(700);
    
    mav(1,0);
    mav(3,0);
    msleep(50);
    
    line_follow(3000,600);
           
    mav(1,0);
    mav(3,0);
    msleep(50);
    
    turn(2500,900);
    line_follow(2000,600);
    
    
    
}



#include <kipr/wombat.h>
#include <stdlib.h>
#define compensation_rate 0.5

void line_follow(int distance, int speed) { //Declare function for line follow
    //Clear motor position counters
    cmpc(0);
    while (abs(gmpc(0)) < distance) { //Make a while loop to follow line
        int error = analog(3) + 3200; //Declare error variable
        float speed_modifier = error * compensation_rate; //Declare speed_modifier variable
        mav(1, speed - speed_modifier);
        mav(3, speed + speed_modifier);
    }
}

void square_up(int speed) {
    float go_back = 0.6; //Make a go back variable and adjust it if needed when testing later on
    float grey_value = (2700 + 3760) / 2; //Make a grey value variable to check for white and black surfaces
    while(analog(5) < grey_value || (analog(5) < grey_value)) { //While loop for squaring up
        if (analog(5) < grey_value) { //Check if right sensor is on white surface
            //the right sensor is on white
            mav(1, speed);
        }else { //Check if right sensor is on black surface
            //right sensor is on black
            mav(1, -speed * go_back);
        }
        if (analog(3) < grey_value) { //Check if left sensor is on white surface
            //the left sensor is on white
            mav(3,speed);
        }else { //Check if left sensor is on black surface
            //left sensor is on black
            mav(3,-speed*go_back);
        }
    }
    //Lock the motors
    mav(1,0);
    mav(3,0);
    msleep(50);
}

void turn(int distance, int speed) {     //declaring a variable for turning

    cmpc(0);   //clearing the motor position counter

    while(abs(gmpc(0) < distance)) {    //getting the motor position for travelling a certain distance
        float change = 3600/190;  //declaring a variable
        float speed_modifier = 430;  //declaring a variable

        if(analog(3) < change) {
            //these will help you arc to turn
            mav(0,speed+speed_modifier);
            mav(3,speed-speed_modifier);
        }
        else {
            //these two will help you arc to get the right position
            mav(0,speed-speed_modifier);
            mav(3,speed+speed_modifier);
        }
    }

    mav(3,0);   //for locking the motors
    mav(1,0);
    msleep(50);
}


int main() {
    enable_servos();
    set_servo_position(2,900);
    disable_servos();

    square_up(700);
    line_follow(3300,600);
    square_up(700);

    mav(1,0);
    mav(3,0);
    msleep(50);

    line_follow(2300,600);

    mav(1,0);
    mav(3,0);
    msleep(1000);

    turn(1600,1000);
    line_follow(1800,-600);
    square_up(700);



}


#include <kipr/wombat.h>
#include <stdlib.h>
#define compensation_rate 0.5

void line_follow(int distance, int speed) { //Declare function for line follow
    //Clear motor position counters
    cmpc(0);
    while (abs(gmpc(0)) < distance) { //Make a while loop to follow line
        int error = analog(3) + 3200; //Declare error variable
        float speed_modifier = error * compensation_rate; //Declare speed_modifier variable
        mav(1, speed - speed_modifier);
        mav(3, speed + speed_modifier);
    }
}

void square_up(int speed) {
    float go_back = 0.6; //Make a go back variable and adjust it if needed when testing later on
    float grey_value = (2700 + 3760) / 2; //Make a grey value variable to check for white and black surfaces
    while(analog(5) < grey_value || (analog(5) < grey_value)) { //While loop for squaring up
        if (analog(5) < grey_value) { //Check if right sensor is on white surface
            //the right sensor is on white
            mav(1, speed);
        }else { //Check if right sensor is on black surface
            //right sensor is on black
            mav(1, -speed * go_back);
        }
        if (analog(3) < grey_value) { //Check if left sensor is on white surface
            //the left sensor is on white
            mav(3,speed);
        }else { //Check if left sensor is on black surface
            //left sensor is on black
            mav(3,-speed*go_back);
        }
    }
    //Lock the motors
    mav(1,0);
    mav(3,0);
    msleep(50);
}

void turn(int distance, int speed) {     //declaring a variable for turning

    cmpc(0);   //clearing the motor position counter

    while(abs(gmpc(0) < distance)) {    //getting the motor position for travelling a certain distance
        float change = 3600/190;  //declaring a variable
        float speed_modifier = 430;  //declaring a variable

        if(analog(3) < change) {
            //these will help you arc to turn
            mav(0,speed+speed_modifier);
            mav(3,speed-speed_modifier);
        }
        else {
            //these two will help you arc to get the right position
            mav(0,speed-speed_modifier);
            mav(3,speed+speed_modifier);
        }
    }

    mav(3,0);   //for locking the motors
    mav(1,0);
    msleep(50);
}

void move_arm_down_slowly(int port, int start_pos, int end_pos, int step) {
    for (int pos = start_pos; start_pos <= end_pos; end_pos += step) {
        set_servo_position(port,pos);
        msleep(100);
    }
}


int main() {
    enable_servos();
    set_servo_position(2,900);

    square_up(700);
    line_follow(3350,600);
    square_up(700);

    mav(1,0);
    mav(3,0);
    msleep(50);

    line_follow(2100,600);

    mav(1,0);
    mav(3,0);
    msleep(1000);

    turn(1200,1200);
    
    mav(1,-900);
    mav(3,-900);
    msleep(1000);
    
    set_servo_position(2,400);
    msleep(1000);

}



#include <kipr/wombat.h>
#include <stdlib.h>
#define compensation_rate 0.5

void line_follow(int distance, int speed) { //Declare function for line follow
    //Clear motor position counters
    cmpc(0);
    while (abs(gmpc(0)) < distance) { //Make a while loop to follow line
        int error = analog(3) + 3200; //Declare error variable
        float speed_modifier = error * compensation_rate; //Declare speed_modifier variable
        mav(1, speed - speed_modifier);
        mav(3, speed + speed_modifier);
    }
}

void square_up(int speed) {
    float go_back = 0.6; //Make a go back variable and adjust it if needed when testing later on
    float grey_value = (2700 + 3760) / 2; //Make a grey value variable to check for white and black surfaces
    while(analog(5) < grey_value || (analog(5) < grey_value)) { //While loop for squaring up
        if (analog(5) < grey_value) { //Check if right sensor is on white surface
            //the right sensor is on white
            mav(1, speed);
        }else { //Check if right sensor is on black surface
            //right sensor is on black
            mav(1, -speed * go_back);
        }
        if (analog(3) < grey_value) { //Check if left sensor is on white surface
            //the left sensor is on white
            mav(3,speed);
        }else { //Check if left sensor is on black surface
            //left sensor is on black
            mav(3,-speed*go_back);
        }
    }
    //Lock the motors
    mav(1,0);
    mav(3,0);
    msleep(50);
}

void turn(int distance, int speed) {     //declaring a variable for turning

    cmpc(0);   //clearing the motor position counter

    while(abs(gmpc(0) < distance)) {    //getting the motor position for travelling a certain distance
        float change = 3600/190;  //declaring a variable
        float speed_modifier = 430;  //declaring a variable

        if(analog(3) < change) {
            //these will help you arc to turn
            mav(0,speed+speed_modifier);
            mav(3,speed-speed_modifier);
        }
        else {
            //these two will help you arc to get the right position
            mav(0,speed-speed_modifier);
            mav(3,speed+speed_modifier);
        }
    }

    mav(3,0);   //for locking the motors
    mav(1,0);
    msleep(50);
}

void move_arm_down_slowly(int port, int start_pos, int end_pos, int step) {
        for (int pos = start_pos; pos <= end_pos; pos += step) {
            set_servo_position(port,pos);  //move servo incrementally up
            msleep(100);   //short delay between steps
        }
    }


int main() {
    enable_servos();
    
    int arm_port = 2;
    int arm_up = 900;
    int arm_down = 300;
    set_servo_position(2,900);

    square_up(700);
    line_follow(3500,600);
    square_up(700);

    mav(1,0);
    mav(3,0);
    msleep(50);

    line_follow(2100,600);

    mav(1,0);
    mav(3,0);
    msleep(1000);

    turn(1500,1200);
    
    mav(1,500);
    mav(3,500);
    msleep(1000);
    
    line_follow(1150,600);
    
    mav(1,900);
    mav(3,-900);
    msleep(2000);
    
    move_arm_down_slowly(arm_port,arm_down,arm_up,20);

}


#include <kipr/wombat.h>
#include <stdlib.h>
#define compensation_rate 0.5

void line_follow(int distance, int speed) { //Declare function for line follow
    //Clear motor position counters
    cmpc(0);
    while (abs(gmpc(0)) < distance) { //Make a while loop to follow line
        int error = analog(3) + 3200; //Declare error variable
        float speed_modifier = error * compensation_rate; //Declare speed_modifier variable
        mav(1, speed - speed_modifier);
        mav(3, speed + speed_modifier);
    }
}

void square_up(int speed) {
    float go_back = 0.6; //Make a go back variable and adjust it if needed when testing later on
    float grey_value = (2700 + 3760) / 2; //Make a grey value variable to check for white and black surfaces
    while(analog(5) < grey_value || (analog(5) < grey_value)) { //While loop for squaring up
        if (analog(5) < grey_value) { //Check if right sensor is on white surface
            //the right sensor is on white
            mav(1, speed);
        }else { //Check if right sensor is on black surface
            //right sensor is on black
            mav(1, -speed * go_back);
        }
        if (analog(3) < grey_value) { //Check if left sensor is on white surface
            //the left sensor is on white
            mav(3,speed);
        }else { //Check if left sensor is on black surface
            //left sensor is on black
            mav(3,-speed*go_back);
        }
    }
    //Lock the motors
    mav(1,0);
    mav(3,0);
    msleep(50);
}

void turn(int distance, int speed) {     //declaring a variable for turning

    cmpc(0);   //clearing the motor position counter

    while(abs(gmpc(0) < distance)) {    //getting the motor position for travelling a certain distance
        float change = 3600/190;  //declaring a variable
        float speed_modifier = 430;  //declaring a variable

        if(analog(3) < change) {
            //these will help you arc to turn
            mav(0,speed+speed_modifier);
            mav(3,speed-speed_modifier);
        }
        else {
            //these two will help you arc to get the right position
            mav(0,speed-speed_modifier);
            mav(3,speed+speed_modifier);
        }
    }

    mav(3,0);   //for locking the motors
    mav(1,0);
    msleep(50);
}

void move_arm_down_slowly(int port, int start_pos, int end_pos, int step) {
        for (int pos = start_pos; pos <= end_pos; pos += step) {
            set_servo_position(port,pos);  //move servo incrementally up
            msleep(100);   //short delay between steps
        }
    }


int main() {
    enable_servos();   //turn on servo ports
    
    int arm_port = 2;  //declare arm_port for slow servos
    int arm_up = 900;  //declare arm_up for slow servos
    int arm_down = 300;  //declare arm_down for slow servos
    set_servo_position(2,900);  //set position for the arm to help move out of start box
    msleep(1000);  //how long it should take to raise up arm
    
    mav(1,500);  //motor one should drive at 500 speed
    mav(3,-500);  //motor three should drive at -500 speed
    msleep(3000);  //th
    
    turn(1100,1200);
    
    mav(1,700);
    mav(3,-700);
    msleep(2500);
    
    turn(1200,-1000);
    square_up(700);
    
    mav(1,-100);
    mav(3,100);
    msleep(500);

    square_up(700);
    line_follow(3500,600);
    square_up(700);

    mav(1,0);
    mav(3,0);
    msleep(50);

    line_follow(2100,600);

    mav(1,0);
    mav(3,0);
    msleep(1000);

    turn(1500,1200);
    
    mav(1,500);
    mav(3,500);
    msleep(1000);
    
    line_follow(1150,600);
    
    mav(1,900);
    mav(3,-900);
    msleep(2000);
    
    move_arm_down_slowly(arm_port,arm_down,arm_up,20);

}


#include <kipr/wombat.h>
#include <stdlib.h>
#define compensation_rate 0.5

void line_follow(int distance, int speed) { //Declare function for line follow
    //Clear motor position counters
    cmpc(0);
    while (abs(gmpc(0)) < distance) { //Make a while loop to follow line
        int error = analog(3) + 3200; //Declare error variable
        float speed_modifier = error * compensation_rate; //Declare speed_modifier variable
        mav(1, speed - speed_modifier);
        mav(3, speed + speed_modifier);
    }
}

void square_up(int speed) {
    float go_back = 0.6; //Make a go back variable and adjust it if needed when testing later on
    float grey_value = (2700 + 3760) / 2; //Make a grey value variable to check for white and black surfaces
    while(analog(5) < grey_value || (analog(5) < grey_value)) { //While loop for squaring up
        if (analog(5) < grey_value) { //Check if right sensor is on white surface
            //the right sensor is on white
            mav(1, speed);
        }else { //Check if right sensor is on black surface
            //right sensor is on black
            mav(1, -speed * go_back);
        }
        if (analog(3) < grey_value) { //Check if left sensor is on white surface
            //the left sensor is on white
            mav(3,speed);
        }else { //Check if left sensor is on black surface
            //left sensor is on black
            mav(3,-speed*go_back);
        }
    }
    //Lock the motors
    mav(1,0);
    mav(3,0);
    msleep(50);
}

void turn(int distance, int speed) {     //declaring a variable for turning

    cmpc(0);   //clearing the motor position counter

    while(abs(gmpc(0) < distance)) {    //getting the motor position for travelling a certain distance
        float change = 3600/190;  //declaring a variable
        float speed_modifier = 430;  //declaring a variable

        if(analog(3) < change) {
            //these will help you arc to turn
            mav(0,speed+speed_modifier);
            mav(3,speed-speed_modifier);
        }
        else {
            //these two will help you arc to get the right position
            mav(0,speed-speed_modifier);
            mav(3,speed+speed_modifier);
        }
    }

    mav(3,0);   //for locking the motors
    mav(1,0);
    msleep(50);
}

void move_arm_down_slowly(int port, int start_pos, int end_pos, int step) {
        for (int pos = start_pos; pos <= end_pos; pos += step) {
            set_servo_position(port,pos);  //move servo incrementally up
            msleep(100);   //short delay between steps
        }
    }


int main() {
    enable_servos();
    
    int arm_port = 2;
    int arm_up = 300;
    int arm_down = 900;
    set_servo_position(2,900);
    msleep(1000);
    
    line_follow(2100,600);

    mav(1,0);
    mav(3,0);
    msleep(1000);

    turn(1500,1200);
    
    mav(1,500);
    mav(3,-500);
    msleep(1000);

    move_arm_down_slowly(arm_port,arm_down,arm_up,20);

}


#include <kipr/wombat.h>
#include <stdlib.h>
#define compensation_rate 0.5

void line_follow(int distance, int speed) { //Declare function for line follow
    //Clear motor position counters
    cmpc(0);
    while (abs(gmpc(0)) < distance) { //Make a while loop to follow line
        int error = analog(3) + 3200; //Declare error variable
        float speed_modifier = error * compensation_rate; //Declare speed_modifier variable
        mav(1, speed - speed_modifier);
        mav(3, speed + speed_modifier);
    }
}

void square_up(int speed) {
    float go_back = 0.6; //Make a go back variable and adjust it if needed when testing later on
    float grey_value = (2700 + 3760) / 2; //Make a grey value variable to check for white and black surfaces
    while(analog(3) < grey_value || (analog(5) < grey_value)) { //While loop for squaring up
        if (analog(3) < grey_value) { //Check if right sensor is on white surface
            //the right sensor is on white
            mav(1, speed);
        }else { //Check if right sensor is on black surface
            //right sensor is on black
            mav(1, -speed * go_back);
        }
        if (analog(5) < grey_value) { //Check if left sensor is on white surface
            //the left sensor is on white
            mav(3,speed);
        }else { //Check if left sensor is on black surface
            //left sensor is on black
            mav(3,-speed*go_back);
        }
    }
    //Lock the motors
    mav(1,0);
    mav(3,0);
    msleep(50);
}

void turn(int distance, int speed) {     //declaring a variable for turning

    cmpc(0);   //clearing the motor position counter

    while(abs(gmpc(0) < distance)) {    //getting the motor position for travelling a certain distance
        float change = 3600/190;  //declaring a variable
        float speed_modifier = 430;  //declaring a variable

        if(analog(3) < change) {
            //these will help you arc to turn
            mav(1,speed+speed_modifier);
            mav(3,speed-speed_modifier);
        }
        else {
            //these two will help you arc to get the right position
            mav(1,speed-speed_modifier);
            mav(3,speed+speed_modifier);
        }
    }

    mav(3,0);   //for locking the motors
    mav(1,0);
    msleep(50);
}


int main()
{
	enable_servos();
    set_servo_position(2,900);
    msleep(1000);
    
    mav(1,500);
    mav(3,-500);
    msleep(3000);
    
    turn(900,1200);
    
    mav(1,700);
    mav(3,-700);
    msleep(6000);
    
    turn(1000,-1200);
    
    mav(1,-400);
    mav(3,400);
    msleep(1300);
    
    square_up(700);
    return 0;
}

#include <kipr/wombat.h>
#include <stdlib.h>
#define compensation_rate 0.5

void line_follow(int distance, int speed) { //Declare function for line follow
    //Clear motor position counters
    cmpc(0);
    while (abs(gmpc(0)) < distance) { //Make a while loop to follow line
        int error = analog(3) + 3200; //Declare error variable
        float speed_modifier = error * compensation_rate; //Declare speed_modifier variable
        mav(1, speed - speed_modifier);
        mav(3, speed + speed_modifier);
    }
}

void square_up(int speed) {
    float go_back = 0.6; //Make a go back variable and adjust it if needed when testing later on
    float grey_value = (2700 + 3760) / 2; //Make a grey value variable to check for white and black surfaces
    while(analog(5) < grey_value || (analog(5) < grey_value)) { //While loop for squaring up
        if (analog(5) < grey_value) { //Check if right sensor is on white surface
            //the right sensor is on white
            mav(1, speed);
        }else { //Check if right sensor is on black surface
            //right sensor is on black
            mav(1, -speed * go_back);
        }
        if (analog(3) < grey_value) { //Check if left sensor is on white surface
            //the left sensor is on white
            mav(3,speed);
        }else { //Check if left sensor is on black surface
            //left sensor is on black
            mav(3,-speed*go_back);
        }
    }
    //Lock the motors
    mav(1,0);
    mav(3,0);
    msleep(50);
}

void turn(int distance, int speed) {     //declaring a variable for turning

    cmpc(0);   //clearing the motor position counter

    while(abs(gmpc(0) < distance)) {    //getting the motor position for travelling a certain distance
        float change = 3600/190;  //declaring a variable
        float speed_modifier = 430;  //declaring a variable

        if(analog(3) < change) {
            //these will help you arc to turn
            mav(1,speed+speed_modifier);
            mav(3,speed-speed_modifier);
        }
        else {
            //these two will help you arc to get the right position
            mav(1,speed-speed_modifier);
            mav(3,speed+speed_modifier);
        }
    }

    mav(1,0);   //for locking the motors
    mav(3,0);
    msleep(50);
}

void move_servo_down_or_close_claw(int port, int start_pos, int end_pos, int step) {
    for (int pos = start_pos; pos >= end_pos; pos -= step) {
        set_servo_position(port, pos);
        msleep(100);
    }
}

int main() {
    enable_servos();
    set_servo_position(2,900);
    msleep(500);
    
    set_servo_position(1,900);
    msleep(500);

    square_up(700);
    line_follow(3600,600);
    square_up(700);

    mav(1,0);
    mav(3,0);
    msleep(50);

    line_follow(2700,600);
    
    mav(1,0);
    mav(3,0);
    msleep(500);

    turn(1200,1200);
    
    mav(1,0);
    mav(3,0);
    msleep(500);
    
    mav(1,-700);
    mav(3,700);
    msleep(2800);
    
    mav(1,0);
    mav(3,0);
    msleep(1000);

    move_servo_down_or_close_claw(2,900,200,20);
    
    set_servo_position(1,400);
    msleep(500);
    
    set_servo_position(2,900);
    msleep(1000);
    
}
